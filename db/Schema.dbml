table organizations {
  id int [ pk, not null, increment ]
  name varchar [ not null, unique]
  logo text [default: null,note: "Logo url"]
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
}

// Emissions Control Area (ECA)
table ecas {
  id int [ pk, not null, increment ]
  longitude decimal [not null]
  latitude decimal [not null]
  name varchar [not null]
}

table ports {
  id int [ pk, not null, increment ]
  name varchar [not null]
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
}

// maybe stick to an enum on user for simplification?
table user_roles { 
  id int [ pk, not null, increment ]
  role varchar [not null, note: 'operator Operators have access to viewing vessels belonging to the company the user is associated with, as well as creating new voyages. admin: Admins have the same access as operators, but in addition to that they can create new users. super_user:  Super users have the same access as admins, but in addition to that they can create admin users.'] 
  status tinyint [not null]
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
}


table users { 
  id int [ pk, not null, increment ]
  role_id int [not null]
  email varchar [ unique, not null ]
  organization_id int [ not null ]
  passowrd varchar [ not null ]
  name varchar [ not null ]
  status tinyint
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
  session_token text [ default: null]
  refreshing_token text [ default: null]
}

table favorite_vessels {
  user_id int [pk,not null]
  vessel_id int [pk,not null]
  created_at timestamp [not null, default: `now()`]
}


// routes are suggested routes generated by the ov algorithm and are associated with a number of waypoints.
// suggested_routes 
table suggested_routes {     
  id int [ pk, not null, increment ]
  eta datetime [ default: null]
  max_wave_height float [not null]
  hfo float [not null]
  lsfo float [not null]
  total_cost float [not null]
  distance_over_ground float [not null]
  distance_through_water float [not null]  
  avgspeed float [not null]
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
  vessel_report_id int [not null]
}

table vessels {
  id int [ pk, not null, increment ]
  organization_id int [not null]
  mmsi          varchar [not null]
  name          varchar [not null]
  created_at timestamp [ default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
}

// Previously named "noonreport". Daily report from the captain to the company and optimum voyage
table vessel_reports {
  id int [ pk, not null, increment ]
  vessel_id int [not null]
  position_waypoint int [default:null]
  current_speed float [not null]
  hfo_consumption float [not null]
  lsfo_consumption float [not null]
  created_at timestamp [not null, default: `now()`]
  selected_route_id int [default:null]
}

table voyages {
  id int [ pk, not null, increment ]
  vessel_id int [not null]
  etd datetime [default: null, note: 'Estimate time of departure']
  eta datetime [default: null, note: 'Estimate time of arrival']
  forwarddraft float [not null, note: 'Forward draft in meters. Measured perpendicular of the bow.']
  aftdraft float [not null, note: 'Aft draft in meters. Measured perpendicular to the stern.']
  optimisation_type ENUM('fixed_eta', 'earliest_arrival', 'least_cost_arrival') [ not null ]
  depart_from int [ default:null, note: 'Departure waypoint']
  arrive_at int [ default:null, note: 'Arrival waypoint']
  sailtime float [ not null, default: 0, note: 'Sailtime in hours']
  hfocost float [ not null, default: 0, note: 'Heavy Fuel Oil (HFO) cost in US dollars.']
  lsfocost float [ not null, default: 0, note: 'Low Sulfor Fuel Oil (LSFO) cost in US dollars.' ]
  hirerate float [ not null, note: 'Hire rate per day. Optional, must only be filled out if the vessel is chartered.']
  status ENUM('created', 'ongoing', 'completed') [not null, default: 'created' ]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
}

table waypoints {
  id int [ pk, not null, increment ]
  suggested_route_id int [default:null]
  port_id int [default:null]
  longitude decimal [ not null ]
  latitude decimal [ not null ]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`, note: 'TODO: Add ON UPDATE ON UPDATE CURRENT_TIMESTAMP']
  sequence_id int     [ default:null ,note: "counts from 0 and up every time a new set of waypoints is added to a route."]
}

enum optimisation_types {
  fixed_eta [ note: 'Optimise for the cheapest route given a fixed arrival time.' ]
  least_cost_arrival [ note: 'Optimise for the cheapest possible trip overall.' ]
  earliest_arrival [ note: 'Optimise for fastest possible arrival.' ]
}


enum voyage_status {
  created [ note: 'New voyage has been created, but no reports received yet.' ]
  ongoing [ note: 'Vessel is currently en route.' ]
  completed [ note: 'Vessel has reached destination.' ]
}


// A user has 1 role
ref: user_roles.id < users.role_id
// A company has 0-* users
ref: organizations.id < users.organization_id
// A vessel has 0-* voyages
ref: vessels.id < voyages.vessel_id
// A vessel_reports has 0-* voyages
ref: vessel_reports.id < suggested_routes.vessel_report_id
// A suggested_routes has 0-* vessel_reports
ref: suggested_routes.id < vessel_reports.selected_route_id
// A route has 1-* waypoints
ref: suggested_routes.id < waypoints.suggested_route_id
// A port has 1-* waypoints
ref: ports.id < waypoints.port_id
// A company has 0-* vessels
ref: organizations.id < vessels.organization_id
// A vessel has 0-* vessel_reports
ref: vessels.id < vessel_reports.vessel_id
// A voyage has 1 departure waypoint
ref: voyages.depart_from > waypoints.id
// A voyage has 1 arrival waypoint
ref: voyages.arrive_at > waypoints.id
// A waypoint may belong to 0-* vessel reports
ref: waypoints.id < vessel_reports.position_waypoint
//ref: favorite_vessels.user_id > users.id
//ref: favorite_vessels.vessel_id > vessels.id